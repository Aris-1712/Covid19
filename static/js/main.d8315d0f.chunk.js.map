{"version":3,"sources":["home.js","charts.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["home","state","all","countrywise","Row","downloaded","componentDidMount","a","Axios","get","res","res2","data","map","obj","row","country","cases","todayCases","deaths","todayDeaths","recovered","active","critical","recoveryrate","deathrate","History","toString","style","fontWeight","color","parseFloat","toFixed","to","pathname","Props","lbl","rounded","size","push","rows","cols","setState","label","field","sort","width","componentDidUpdate","setTimeout","className","this","length","class","textAlign","responsive","striped","sortable","bordered","small","columns","Component","charts","chart","chart2","chart3","props","location","Object","keys","timeline","dt","label2","dt2","dataLine","labels","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","alert","key","undefined","options","withRouter","App","exact","path","component","Home","Boolean","window","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.d8315d0f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { MDBDataTable, MDBCol, MDBContainer, MDBRow ,MDBBtn} from \"mdbreact\";\r\nimport {Link} from 'react-router-dom'\r\nimport './home.css'\r\n\r\nclass home extends Component {\r\n  state = {\r\n    all: {},\r\n    countrywise: [],\r\n    Row: [],\r\n    downloaded:false,\r\n  \r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    let res = await Axios.get(\"https://corona.lmao.ninja/v2/all\");\r\n    let res2 = await Axios.get(\"https://corona.lmao.ninja/v2/countries\");\r\n    \r\n    \r\n    let Row = [];\r\n    res2.data.map(obj => {\r\n      let row = {\r\n        country: \"\",\r\n        cases: \"\",\r\n        todayCases: \"\",\r\n        deaths: \"\",\r\n        todayDeaths: \"\",\r\n        recovered: \"\",\r\n        active: \"\",\r\n        critical: \"\",\r\n        recoveryrate:0,\r\n        deathrate:0,\r\n        History:\"\"\r\n      };\r\n\r\n      row.country = obj.country.toString()\r\n      row.cases = obj.cases.toString();\r\n      row.todayCases = obj.todayCases.toString();\r\n      row.deaths = obj.deaths.toString();\r\n      row.todayDeaths = (\r\n        <h4 style={{ fontWeight: \"bold\", color: \"red\" }}>{obj.todayDeaths.toString()}</h4>\r\n      );\r\n      row.recovered = obj.recovered.toString();\r\n      row.active = obj.active.toString();\r\n      row.critical = obj.critical.toString();\r\n      row.recoveryrate= <h4 style={{ fontWeight: \"bold\", color: \"green\" }}>{((parseFloat(obj.recovered.toString())/parseFloat(obj.cases.toString()))*100).toFixed(2) + '%'}</h4>\r\n      row.deathrate=<h4 style={{ fontWeight: \"bold\", color: \"red\" }}>{((parseFloat(obj.deaths.toString())/parseFloat(obj.cases.toString()))*100).toFixed(2) +'%'}</h4>\r\n      row.History=<Link to={{pathname:'/charts',Props:{lbl:obj.country}}}><MDBBtn color=\"default\" rounded size=\"sm\" >HISTORY</MDBBtn></Link>;\r\n      Row.push(row);\r\n    });\r\n    // this.setState({ Row: Row });\r\n    this.data.rows=Row\r\n    this.data.cols=this.cols\r\n    // this.setState({downloaded:true})\r\n    this.setState({ all: res.data, countrywise: res2.data });\r\n    \r\n  };\r\n  cols = [\r\n    {\r\n      label: \"Country\",\r\n      field: \"country\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Total Cases\",\r\n      field: \"cases\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Cases Today\",\r\n      field: \"todayCases\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Total Deaths\",\r\n      field: \"deaths\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Deaths Today\",\r\n      field: \"todayDeaths\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Recovered\",\r\n      field: \"recovered\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Active\",\r\n      field: \"active\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Critical\",\r\n      field: \"critical\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Death Rate\",\r\n      field: \"deathrate\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Recovery Rate\",\r\n      field: \"recoveryrate\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    },\r\n    {\r\n      label: \"Historical Data\",\r\n      field: \"History\",\r\n      sort: \"asc\",\r\n      width: 150\r\n    }\r\n  ];\r\n   data={\r\n    rows:[],\r\n    cols:[]\r\n  }\r\n  componentDidUpdate=()=>{\r\n     setTimeout(async() => {\r\n      // \r\n      \r\n    let res = await Axios.get(\"https://corona.lmao.ninja/v2/all\");\r\n    let res2 = await Axios.get(\"https://corona.lmao.ninja/v2/countries\");\r\n    \r\n    \r\n    let Row = [];\r\n    res2.data.map(obj => {\r\n      let row = {\r\n        country: \"\",\r\n        cases: \"\",\r\n        todayCases: \"\",\r\n        deaths: \"\",\r\n        todayDeaths: \"\",\r\n        recovered: \"\",\r\n        active: \"\",\r\n        critical: \"\",\r\n        recoveryrate:0,\r\n        deathrate:0,\r\n        History:\"\"\r\n      };\r\n\r\n      row.country = obj.country.toString()\r\n      row.cases = obj.cases.toString();\r\n      row.todayCases = obj.todayCases.toString();\r\n      row.deaths = obj.deaths.toString();\r\n      row.todayDeaths = (\r\n        <h4 style={{ fontWeight: \"bold\", color: \"red\" }}>{obj.todayDeaths.toString()}</h4>\r\n      );\r\n      row.recovered = obj.recovered.toString();\r\n      row.active = obj.active.toString();\r\n      row.critical = obj.critical.toString();\r\n      // row.recoveryrate=obj.recovered.toString()\r\n      // console.log(row.recoveryrate)\r\n      row.recoveryrate= <h4 style={{ fontWeight: \"bold\", color: \"green\" }}>{((parseFloat(obj.recovered.toString())/parseFloat(obj.cases.toString()))*100).toFixed(2) + '%'}</h4>\r\n      row.deathrate=<h4 style={{ fontWeight: \"bold\", color: \"red\" }}>{((parseFloat(obj.deaths.toString())/parseFloat(obj.cases.toString()))*100).toFixed(2) +'%'}</h4>\r\n      row.History=<Link to={{pathname:'/charts',Props:{lbl:obj.country}}}><MDBBtn color=\"default\" rounded size=\"sm\" >HISTORY</MDBBtn></Link>;\r\n      Row.push(row);\r\n    });\r\n    // this.setState({ Row: Row });\r\n    this.data.rows=Row\r\n    this.data.cols=this.cols\r\n    // this.setState({downloaded:true})\r\n    this.setState({ all: res.data, countrywise: res2.data });\r\n    }, 60000);\r\n\r\n  \r\n  }\r\n  render() {\r\n    // console.log(this.state)\r\n   \r\n    // console.log(this.data)\r\n    return (\r\n      \r\n      <div className=\"container\">\r\n        {this.state.countrywise.length===0?\r\n        (<div><div class=\"loader\">Loading...</div>\r\n        <h4 style={{textAlign:\"center\"}}>Fetching data. Please wait.</h4></div>):\r\n        (<div><br></br>\r\n        <h1 style={{color:\"Red\",fontWeight:\"bold\" , textAlign:\"center\"}}>COVID19</h1>\r\n        <hr style={{}}></hr>\r\n        <br></br>\r\n        \r\n          <title>COVID-19</title>\r\n          <div className=\"div2\">\r\n          <h1>Total Cases: <span style={{ fontWeight: \"bold\" ,color:\"Blue\"}}> {this.state.all.cases}</span> </h1>\r\n          <h1>Total Deaths: <span style={{ fontWeight: \"bold\",color:\"Red\" }}> {this.state.all.deaths}</span> </h1>\r\n          <h1>Total Recovered: <span style={{ fontWeight: \"bold\",color:\"Green\"}}> {this.state.all.recovered}</span> </h1>\r\n          </div>\r\n          <div className=\"div1\"> \r\n          <MDBRow>\r\n            <MDBCol size=\"4\">\r\n              {\" \"}\r\n              <h1 style={{ textAlign: \"center\" }}>Total Cases </h1>\r\n            </MDBCol>\r\n            <MDBCol size=\"4\">\r\n              <h1 style={{ textAlign: \"center\" }}>Total Deaths </h1>\r\n            </MDBCol>\r\n            <MDBCol size=\"4\">\r\n              <h1 style={{ textAlign: \"center\" }}>Total Recovered </h1>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <MDBRow>\r\n            <MDBCol size=\"4\">\r\n              {\" \"}\r\n              <h1 style={{ textAlign: \"center\", fontWeight: \"bold\" ,color:\"Blue\"}}>\r\n                {\" \"}\r\n                {this.state.all.cases}\r\n              </h1>\r\n            </MDBCol>\r\n            <MDBCol size=\"4\">\r\n              <h1 style={{ textAlign: \"center\", fontWeight: \"bold\" ,color:\"Red\"}}>\r\n                {this.state.all.deaths}\r\n              </h1>\r\n            </MDBCol>\r\n            <MDBCol size=\"4\">\r\n              <h1 style={{ textAlign: \"center\", fontWeight: \"bold\",color:\"Green\" }}>\r\n                {this.state.all.recovered}\r\n              </h1>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          </div>\r\n          <hr></hr>\r\n          <MDBDataTable\r\n            responsive\r\n            striped\r\n            sortable={false}\r\n            bordered\r\n            small\r\n            data={{columns:this.data.cols, rows:this.data.rows}}\r\n          />\r\n    </div>)}\r\n      </div>\r\n    )}\r\n}\r\n\r\nexport default home;\r\n","import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { MDBDataTable, MDBCol, MDBContainer, MDBRow } from \"mdbreact\";\r\nimport {withRouter,Redirect} from 'react-router-dom'\r\nimport './charts.css'\r\n\r\nclass charts extends Component {\r\n    state={\r\n        chart:{},\r\n        chart2:{},\r\n        chart3:{}\r\n    }\r\n    componentDidMount=async()=>{\r\n        try{\r\n        let res = await Axios.get(\"https://corona.lmao.ninja/v2/historical/\"+this.props.location.Props.lbl);\r\n        // console.log(res.data)\r\n        let label=Object.keys(res.data.timeline.cases)\r\n        let dt=[]\r\n        let data=label.map((obj)=>{\r\n            dt.push(res.data.timeline.cases[obj])\r\n\r\n        })\r\n        let label2=Object.keys(res.data.timeline.deaths)\r\n        let dt2=[]\r\n        let data2=label2.map((obj)=>{\r\n            dt2.push(res.data.timeline.deaths[obj])\r\n\r\n        })\r\n        // let label3=Object.keys(res.data.timeline.recovered)\r\n        // let dt3=[]\r\n        // let data3=label3.map((obj)=>{\r\n        //     dt3.push(res.data.timeline.recovered[obj])\r\n\r\n        // })\r\n        // this.setState({label:label,data:dt})\r\n        let chart = {\r\n            dataLine: {\r\n              labels:label,\r\n              datasets: [\r\n                {\r\n                  label: \"Cases\",\r\n                  fill: true,\r\n                  lineTension: 0.3,\r\n                  backgroundColor: \"rgba(225, 204,230, .3)\",\r\n                  borderColor: \"rgb(205, 130, 158)\",\r\n                  borderCapStyle: \"butt\",\r\n                  borderDash: [],\r\n                  borderDashOffset: 0.0,\r\n                  borderJoinStyle: \"miter\",\r\n                  pointBorderColor: \"rgb(205, 130,1 58)\",\r\n                  pointBackgroundColor: \"rgb(255, 255, 255)\",\r\n                  pointBorderWidth: 10,\r\n                  pointHoverRadius: 5,\r\n                  pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\r\n                  pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\r\n                  pointHoverBorderWidth: 2,\r\n                  pointRadius: 1,\r\n                  pointHitRadius: 10,\r\n                  data: dt\r\n                }\r\n              ]\r\n            }\r\n          };\r\n          let chart2 = {\r\n            dataLine: {\r\n              labels:label2,\r\n              datasets: [\r\n                {\r\n                  label: \"Deaths\",\r\n                  fill: true,\r\n                  lineTension: 0.3,\r\n                  backgroundColor: \"rgba(225, 204,230, .3)\",\r\n                  borderColor: \"rgb(205, 130, 158)\",\r\n                  borderCapStyle: \"butt\",\r\n                  borderDash: [],\r\n                  borderDashOffset: 0.0,\r\n                  borderJoinStyle: \"miter\",\r\n                  pointBorderColor: \"rgb(205, 130,1 58)\",\r\n                  pointBackgroundColor: \"rgb(255, 255, 255)\",\r\n                  pointBorderWidth: 10,\r\n                  pointHoverRadius: 5,\r\n                  pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\r\n                  pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\r\n                  pointHoverBorderWidth: 2,\r\n                  pointRadius: 1,\r\n                  pointHitRadius: 10,\r\n                  data: dt2\r\n                }\r\n              ]\r\n            }\r\n          };\r\n          // let chart3 = {\r\n          //   dataLine: {\r\n          //     labels:label3,\r\n          //     datasets: [\r\n          //       {\r\n          //         label: \"Recovered\",\r\n          //         fill: true,\r\n          //         lineTension: 0.3,\r\n          //         backgroundColor: \"rgba(225, 204,230, .3)\",\r\n          //         borderColor: \"rgb(205, 130, 158)\",\r\n          //         borderCapStyle: \"butt\",\r\n          //         borderDash: [],\r\n          //         borderDashOffset: 0.0,\r\n          //         borderJoinStyle: \"miter\",\r\n          //         pointBorderColor: \"rgb(205, 130,1 58)\",\r\n          //         pointBackgroundColor: \"rgb(255, 255, 255)\",\r\n          //         pointBorderWidth: 10,\r\n          //         pointHoverRadius: 5,\r\n          //         pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\r\n          //         pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\r\n          //         pointHoverBorderWidth: 2,\r\n          //         pointRadius: 1,\r\n          //         pointHitRadius: 10,\r\n          //         data: dt3\r\n          //       }\r\n          //     ]\r\n          //   },chart3:chart3.dataLine\r\n          // };\r\n          this.setState({chart:chart.dataLine,chart2:chart2.dataLine})\r\n        }\r\n        catch(err){\r\n            alert(\"Select a country to view the data\")\r\n        }\r\n    }\r\n    componentDidUpdate=()=>{\r\n      //  console.log(this.state)\r\n      }\r\n    render(){\r\n      let key=Object.keys(this.state.chart)\r\n        // console.log(this.props)\r\nreturn(\r\n\r\n<div>\r\n  {key.length===0?(<div><div class=\"loader\">Loading...</div>\r\n        <h4 style={{textAlign:\"center\"}}>Fetching data. Please wait.</h4></div>):(<MDBContainer>\r\n    {this.props.location.Props!==undefined?<h1 className=\"mt-5\" style={{color:\"Red\",fontWeight:\"bold\"}}>{this.props.location.Props.lbl}<span style={{fontWeight:\"lighter\"}}>(Daily data)</span></h1>: <Redirect to=\"/\" />}\r\n    <h2 style={{fontWeight:\"bold\"}}>Total Cases</h2>\r\n    <Line data={this.state.chart} options={{ responsive: true }} />\r\n    <hr></hr>\r\n    <h2 style={{fontWeight:\"bold\"}}>Total Deaths</h2>\r\n    <Line data={this.state.chart2} options={{ responsive: true }} />\r\n    <br></br>\r\n    <br></br>\r\n    {/* <hr></hr>\r\n    <h2 style={{fontWeight:\"bold\"}}>Recovered</h2>\r\n    <Line data={this.state.chart3} options={{ responsive: true }} /> */}\r\n  </MDBContainer>)}\r\n</div>\r\n)\r\n    }\r\n}\r\nexport default withRouter(charts)","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './home';\nimport DatatablePage from './DatatablePage'\nimport {Route,Switch} from 'react-router-dom'\nimport charts from './charts'\n\n\nclass  App extends Component {\n  render(){return (\n    <div className=\"App\">\n      <Switch>\n     <Route exact path='/' component={Home}></Route>\n     <Route path='/charts' component={charts}></Route>\n     </Switch>\n    </div>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\nimport {BrowserRouter} from 'react-router-dom'\nReactDOM.render(\n  \n    <BrowserRouter basename='/Covid19/'><App /></BrowserRouter>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}